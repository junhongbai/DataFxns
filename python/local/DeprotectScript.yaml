id: 0df8f3c7-f3b9-f98d-7285-c74791149f7f
name: Deprotect Structures
description: Creates a new structure column with protecting groups removed
category: Chemistry
version: 1.0.0
serviceName: Script
serviceUri: glysade.python
executorId: Glysade.CPythonDataFxn
inputFields:
- control:
    id: structureColumn
    label: Select structure column
    type: columnselect
    filters:
    - dataType: string
      contentType:
      - chemical/x-mdl-molfile
      - chemical/x-mdl-molfile-v3000
      - chemical/x-smiles
      - chemical/x-daylight-smiles
    - dataType: binary
      contentType:
      - chemical/x-mdl-molfile
      - chemical/x-mdl-molfile-v3000
    validationRules:
    - type: required
      message: Must select column of 2D structures
  request:
    id: structureColumn
    dataType: string
    selectorType: column
tags:
- color: '#50AF28'
  text: chemistry
- color: '#e2f062'
  text: tform
ironPython: ''
updateBehavior: automatic
maximumOutputColumns: !!int 10
maximumOutputTables: !!int 0
chemistryFunction: !!bool false
script: |
  from typing import Optional

  from df.chem_helper import column_to_molecules, molecules_to_column
  from df.data_transfer import DataFunctionRequest, DataFunctionResponse, DataType, ColumnData, \
      string_input_field
  from rdkit import Chem
  from rdkit.Chem.rdDeprotect import Deprotect
  from rdkit.Chem.rdchem import Mol


  def compare_molecules(mol1: Optional[Mol], mol2: Optional[Mol]) -> bool:
      if not mol1 or not mol2:
          return False
      return Chem.MolToSmiles(mol1, True) != Chem.MolToSmiles(mol2, True)


  def execute(request: DataFunctionRequest) -> DataFunctionResponse:
      column_id = string_input_field(request, 'structureColumn')
      input_column = request.inputColumns[column_id]
      input_molecules = column_to_molecules(input_column)
      deprotected_molecules = [None if m is None else Deprotect(m) for m in input_molecules]
      changed = [compare_molecules(mol1, mol2) for mol1, mol2 in zip(input_molecules, deprotected_molecules)]
      output_molecules_column = molecules_to_column(deprotected_molecules, f'Deprotected {input_column.name}', DataType.STRING)
      changed_column = ColumnData(name='Changed', dataType=DataType.BOOLEAN, values=changed)
      response = DataFunctionResponse(outputColumns=[output_molecules_column, changed_column])
      return response
outputFields:
- id: structureColumn
  name: Input structure column
  source: inputField
  type: default
- id: column1
  name: Output deprotected structure column
  source: column
  type: default
- id: column2
  name: Output changed column
  source: column
  type: filter
allowedClients:
- Analyst
- WebPlayer
limitBy: none
demoUrl: https://youtu.be/tccIYcMI5LY?si=0bWiRgUIIP-kFUaa
