id: 8a684464-212f-4aa1-8be8-ec0628803f5a
name: MMPDB Database Search
description: Finds MMP transformations and associated property predictions for a query structure
category: Chemistry
version: 1.0.0
serviceName: MmpdbDatabaseSearch
serviceUri: glysade.python
executorId: Glysade.CPythonDataFxn
inputFields:
  - control:
      id: queryData
      label: Enter query structure
      type: sketcher
      validationRules:
      - type: structure
        message: Must enter a structure
    request:
      id: queryData
      dataType: string
      contentType: chemical/x-mdl-molfile
      field: structure
  - control:
      id: mmpdbDatabasePath
      label: MMPDB database
      type: file
      mode: path
      pathType: file
      fileTypes:
        - name: MMPDB database
          extension: .mmpdb
      validationRules:
        - type: required
          message: ''
    request:
      id: mmpdbDatabasePath
      dataType: string
      data: C:\db\mmp\AID_1341_datatable_all.mmpdb
tags:
  - color: '#50AF28'
    text: chemistry
  - color : '#f7cb2d'
    text  : search
ironPython: |
    ####################################################
    #  Copyright 2022 Glysade LLC, All Rights Reserved #
    ####################################################

    import sys, clr, json
    from System import Guid, String
    from Spotfire.Dxp.Data import DataTable, DataManager
    from Spotfire.Dxp.Application import PanelTypeIdentifiers
    from Spotfire.Dxp.Application import Panel
    from Spotfire.Dxp.Application.Layout import LayoutDefinition
    import Spotfire.Dxp.Application.PanelCollection

    from System import AppDomain
    for asm in AppDomain.CurrentDomain.GetAssemblies():
        if asm.GetName().Name == 'Charts' or asm.GetName().Name == 'Common':
            clr.AddReference(asm.FullName)

    from Common import ColumnIdService
    from Charts import ChartsModel

    dataTable = ResultTables[0]
    tableId = dataTable.Id.ToString()

    if not dataTable:
        raise Exception('target table not found')

    idService = Application.GetService(ColumnIdService)

    page = Document.Pages.AddNew('MMP Database Search Results')

    tableVis = page.Visuals.AddNew[ChartsModel]()
    tableVis.SetKeyValue('visualization','table-visualization')
    tableVis.DataTable = dataTable
    tableVis.ConfigureColumns()
    tableVis.Title = 'MMP Results'
    tableVis.Marking = Document.Data.Markings.DefaultMarkingReference
    tableVis.SetKeyValue(tableId+".table-visualization.table.transposed","true")
    skipColumns = ['Query','ENV_RULE','Fingerprint','TransformFingerprint']
    removed = []
    unfixed = []
    for column in dataTable.Columns:
        if column.Name in skipColumns:
            removed.append(idService.GetID(column))
        else:
            unfixed.append(idService.GetID(column))

    tableVis.SetKeyValue(tableId+".table-visualization.table.removedColumnIds", json.dumps(removed))
    tableVis.SetKeyValue(tableId+".table-visualization.table.unfixedColumnIds", json.dumps(unfixed))

    mmpFilterVis = page.Visuals.AddNew[ChartsModel]()
    mmpFilterVis.SetKeyValue('visualization','mmp-filter-visualization')
    mmpFilterVis.DataTable = dataTable
    mmpFilterVis.ConfigureColumns()
    mmpFilterVis.Title = 'MMP Filter'
    mmpFilterVis.Marking = Document.Data.Markings.DefaultMarkingReference
    mmpFilterVis.SetKeyValue('mmp-filter-visualization.filter.mmp-results-visualization',tableVis.Visual.Id.ToString())

    mpoVis = page.Visuals.AddNew[ChartsModel]()
    mpoVis.SetKeyValue('visualization','mpo-visualization')
    mpoVis.DataTable = dataTable
    mpoVis.ConfigureColumns()
    mpoVis.Title = 'MMP Properties'
    mpoVis.Marking = Document.Data.Markings.DefaultMarkingReference
    skipColumns = ['RADIUS','ENV_RULE']
    configured = []
    for column in dataTable.Columns:
        if column.DataType.IsNumeric and column.Name not in skipColumns:
            configured.append({'columnId': idService.GetID(column),'logScale':False,'inverted':False})
    mpoVis.SetKeyValue(tableId+".mpo-visualization.mpo.axes",json.dumps(configured))

    tableVis.SetActiveVisual()
    page.AutoConfigure()

    page.FilterPanel.Visible = True
    page.DetailsOnDemandPanel.Visible = False

    filterPanel = page.FilterPanel
    for group in filterPanel.TableGroups:
        if group.Name != dataTable.Name:
            group.Visible = False

    layout = LayoutDefinition()
    layout.BeginStackedSection()
    layout.BeginSideBySideSection()
    layout.Add(mmpFilterVis.Visual,33.3)
    layout.Add(mpoVis.Visual,66.6)
    layout.EndSection()
    layout.Add(tableVis.Visual)
    layout.EndSection()
    page.ApplyLayout(layout)
updateBehavior: automatic
maximumOutputColumns: !!int 0
maximumOutputTables: !!int 1
chemistryFunction: !!bool false
allowedClients:
- Analyst
