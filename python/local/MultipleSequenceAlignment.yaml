id: b9657ce6-3399-47a2-a60d-4d4b30f5620c
name: Multiple Sequence Alignment
serviceName: MultipleSequenceAlignment
executorId: Glysade.CPythonDataFxn
serviceUri: glysade.python
version: 1.0.0
inputFields:
  - control:
      id: sequenceColumn
      label: Select sequence column
      type: columnselect
      filters:
        - dataType: string
          contentType: chemical/x-sequence
        - dataType: binary
          contentType: chemical/x-genbank
      validationRules:
        - type: required
    request:
      id: sequenceColumn
      dataType: string
      selectorType: column
  - control:
      id: alignmentMethod
      label: Alignment method
      type: radiogroup
      radios:
        - text: Clustal Omega
          value: CLUSTALO
        - text: MUSCLE
          value: MUSCLE
      validationRules:
        - type: required
          message: Must select something from 'Alignment method'
    request:
      id: alignmentMethod
      dataType: string
      data: CLUSTALO
description: Performs multiple sequence alignment using a variety of algorithms
category: Biopolymer
maximumOutputColumns: !!int 3
maximumOutputTables: !!int 0
demoUrl: https://youtu.be/mMeIc81uujM?si=2-BeD-KFIKHFf_Aa
tags:
  - color : '#337abc'
    text  : sequence
  - color : '#e2f062'
    text  : tform
ironPython: |
  #####################################################
  #  Copyright 2023 Glysade LLC, All Rights Reserved  #
  #####################################################

  import sys,clr
  import json
  from Spotfire.Dxp.Data import DataTable, DataManager, DataType, DataPropertyClass,DataProperty
  from Spotfire.Dxp.Application import PanelTypeIdentifiers
  from Spotfire.Dxp.Application import Panel
  import Spotfire.Dxp.Application.PanelCollection

  from System import AppDomain
  loadAssemblies = ['Charts', 'Common']
  for asm in AppDomain.CurrentDomain.GetAssemblies():
    if asm.GetName().Name in loadAssemblies:
      clr.AddReference(asm.FullName)

  from Common import ColumnIdService
  from Charts import ChartsModel
  model_type = ChartsModel

  #dataFxnId passed as arg
  dataTable = InputTables[0]

  if not dataTable:
      raise Exception('target table not found')

  tableId = dataTable.Id.ToString()
  dataFxnId = DataFxn.DataFunctionDefinition.Settings['Id']

  page = Document.Pages.AddNew('MSA Results')
  panelsToHide = [PanelTypeIdentifiers.DataPanel, PanelTypeIdentifiers.DetailsOnDemandPanel]

  for panel in page.Panels:
      if panel.TypeId in panelsToHide:
          if panel.Visible:
              panel.Visible = False

  idSvc = Application.GetService[ColumnIdService]()

  msaVis = page.Visuals.AddNew[model_type]()
  msaVis.SetKeyValue('visualization','sequence-visualization')
  msaVis.DataTable = dataTable
  msaVis.ConfigureColumns()
  alignedColumn = ResultColumns[0]
  msaVis.SetKeyValue(tableId+'.sequence-visualization.sequenceViewer.sequenceColumnId', idSvc.GetID(alignedColumn))
  msaVis.Marking = Document.Data.Markings.DefaultMarkingReference

  dendroVis = page.Visuals.AddNew[model_type]()
  dendroVis.SetKeyValue('visualization','dendrogram-visualization')
  dendroVis.SetKeyValue(tableId+'.dendrogram-visualization.dendrogram.style','0')
  dendroVis.DataTable = dataTable
  dendroVis.ConfigureColumns()
  dendroVis.Marking = Document.Data.Markings.DefaultMarkingReference
  for columnRef in dendroVis.DataColumnCollection.ColumnReferences:
      column = columnRef.DataColumn
      if column.Properties.DataType == DataType.String and column.Properties.HasPropertyValue('tree') and column.Properties.HasPropertyValue('ChemCharts.DFResult'):
          dfJson = json.loads(str(column.Properties.GetProperty('ChemCharts.DFResult')))
          if dfJson['dataFxnId'] == dataFxnId:
              dendroVis.SetKeyValue(tableId+'.dendrogram-visualization.dendrogram.dendrogramColumnId',str(columnRef.Id))
              break

  msaVis.SetActiveVisual()
  page.AutoConfigure()
