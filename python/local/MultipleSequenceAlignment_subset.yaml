id: f9755d36-508f-22f5-6b50-b744e9759ab0
name: Multiple Sequence Alignment (subset)
description: Performs multiple sequence alignment on a subset of sequences in a table using a variety of algorithms.  The subset is determined my marking, filtering, or both.
category: Biopolymer
version: 1.0.0
serviceName: MultipleSequenceAlignment
serviceUri: glysade.python
executorId: Glysade.CPythonDataFxn
inputFields:
- control:
    id: sequenceColumn
    label: Select sequence column
    type: columnselect
    filters:
    - dataType: string
      contentType: chemical/x-sequence
    - dataType: binary
      contentType: chemical/x-genbank
    validationRules:
    - type: required
    limitByControlId: limitByField
  request:
    id: sequenceColumn
    dataType: string
    selectorType: column
- control:
    id: limitByField
    label: Choose limiting method 
    type: limitby
  request:
  - id: limitByField
    dataType: string
    field: limitBy
    data: none
  - id: limitByFieldMarking
    dataType: string
    field: marking
- control:
    id: alignmentMethod
    label: Alignment method
    type: radiogroup
    radios:
    - text: Clustal Omega
      value: CLUSTALO
    - text: MUSCLE
      value: MUSCLE
    validationRules:
    - type: required
      message: Must select something from 'Alignment method'
  request:
    id: alignmentMethod
    dataType: string
    data: CLUSTALO
tags:
- color: '#337abc'
  text: sequence
- color: '#e2f062'
  text: tform
ironPython: |
  #####################################################
  #  Copyright 2023 Glysade LLC, All Rights Reserved  #
  #####################################################

  import sys,clr
  import json
  from Spotfire.Dxp.Data import DataTable, DataManager, DataType, DataPropertyClass,DataProperty
  from Spotfire.Dxp.Application import PanelTypeIdentifiers
  from Spotfire.Dxp.Application import Panel
  import Spotfire.Dxp.Application.PanelCollection

  from System import AppDomain
  loadAssemblies = ['Charts', 'Common']
  for asm in AppDomain.CurrentDomain.GetAssemblies():
    if asm.GetName().Name in loadAssemblies:
      clr.AddReference(asm.FullName)

  from Common import ColumnIdService
  from Charts import ChartsModel
  model_type = ChartsModel

  #dataFxnId passed as arg
  dataTable = InputTables[0]

  if not dataTable:
      raise Exception('target table not found')

  tableId = dataTable.Id.ToString()
  dataFxnId = DataFxn.DataFunctionDefinition.Settings['Id']

  page = Document.Pages.AddNew('MSA Results')
  panelsToHide = [PanelTypeIdentifiers.DataPanel, PanelTypeIdentifiers.DetailsOnDemandPanel]

  for panel in page.Panels:
      if panel.TypeId in panelsToHide:
          if panel.Visible:
              panel.Visible = False

  idSvc = Application.GetService[ColumnIdService]()

  msaVis = page.Visuals.AddNew[model_type]()
  msaVis.SetKeyValue('visualization','sequence-visualization')
  msaVis.DataTable = dataTable
  msaVis.ConfigureColumns()
  alignedColumn = ResultColumns[0]
  msaVis.SetKeyValue(tableId+'.sequence-visualization.sequenceViewer.sequenceColumnId', idSvc.GetID(alignedColumn))
  msaVis.Marking = Document.Data.Markings.DefaultMarkingReference

  dendroVis = page.Visuals.AddNew[model_type]()
  dendroVis.SetKeyValue('visualization','dendrogram-visualization')
  dendroVis.SetKeyValue(tableId+'.dendrogram-visualization.dendrogram.style','0')
  dendroVis.DataTable = dataTable
  dendroVis.ConfigureColumns()
  dendroVis.Marking = Document.Data.Markings.DefaultMarkingReference
  for columnRef in dendroVis.DataColumnCollection.ColumnReferences:
      column = columnRef.DataColumn
      if column.Properties.DataType == DataType.String and column.Properties.HasPropertyValue('tree') and column.Properties.HasPropertyValue('ChemCharts.DFResult'):
          dfJson = json.loads(str(column.Properties.GetProperty('ChemCharts.DFResult')))
          if dfJson['dataFxnId'] == dataFxnId:
              dendroVis.SetKeyValue(tableId+'.dendrogram-visualization.dendrogram.dendrogramColumnId',str(columnRef.Id))
              break

  msaVis.SetActiveVisual()
  page.AutoConfigure()
updateBehavior: manual
maximumOutputColumns: !!int 3
maximumOutputTables: !!int 0
chemistryFunction: !!bool false
allowedClients:
- Analyst
- WebPlayer
demoUrl: https://youtu.be/mMeIc81uujM?si=2-BeD-KFIKHFf_Aa
limitBy: none
minimumChartsVersion: 4.3.0.6
confirmSubmit: 
