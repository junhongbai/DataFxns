id: db5b66b8-6f7d-4ba3-aa84-905188794c46
name: Order by ID
description: Order and filter a table to a list of corporate identifiers.
category: General
version: 1.0.0
serviceName: Script
serviceUri: glysade.python
executorId: Glysade.CPythonDataFxn
inputFields:
- control:
    id: idColumn
    label: Select ID column
    type: columnselect
    filters:
    - dataType:
      - string
      - int
      contentType: []
    validationRules:
    - type: required
      message: Must select column of unique identifiers
  request:
    id: idColumn
    dataType: string
    selectorType: column
- control:
    id: identifiers
    label: IDs
    type: textarea
  request:
    id: identifiers
    dataType: string
tags:
- color: '#f1f72d'
  text: filter
ironPython: |-
  import sys
  import clr
  import json
  import __builtin__
  from System import AppDomain
  from Spotfire.Dxp.Data import *
  from Spotfire.Dxp.Application.Filters import RangeFilter, FilterTypeIdentifiers

  loadAssemblies = ['Charts', 'Common']
  for asm in AppDomain.CurrentDomain.GetAssemblies():
      if asm.GetName().Name in loadAssemblies:
          clr.AddReference(asm.FullName)

  from Charts import ChartsModel
  from Common import ColumnIdService

  idSvc = Application.GetService[ColumnIdService]()
  page = Document.ActivePageReference

  if len(InputTables) > 0 and len(ResultColumns) > 0:
      columnId = idSvc.GetID(ResultColumns[0])

      for visual in page.Visuals:
          if visual.TypeId.Name == 'Lead Discovery ChemCharts' or visual.TypeId.Name == 'ChemCharts':
              model = visual.As[ChartsModel]()
              if model.GetKeyValue('visualization') == 'table-visualization' and model.DataTable.Equals(InputTables[0]):
                  model.SetSortCriteria(columnId, 'asc', 0)
                  model.Invalidate()

      if page.FilterPanel:
          for tableGrp in page.FilterPanel.TableGroups:
              if tableGrp.FilterCollectionReference.DataTableReference.Equals(InputTables[0]):
                  tableGrp.FilterCollectionReference.ResetAllFilters()
                  for handle in tableGrp.FilterHandles:
                      if handle.FilterReference.Name == ResultColumns[0].Name:
                          if handle.FilterReference.TypeId != FilterTypeIdentifiers.RangeFilter:
                              handle.FilterReference.TypeId = FilterTypeIdentifiers.RangeFilter
                          filter = handle.FilterReference.As[RangeFilter]()
                          filter.Reset()
                          filter.IncludeEmpty = False
updateBehavior: automatic
maximumOutputColumns: !!int 1
maximumOutputTables: !!int 0
chemistryFunction: !!bool false
script: |2+

  from df.data_transfer import DataFunctionRequest, DataFunctionResponse, DataType, ColumnData, \
      string_input_field

  def to_string(value):
      if isinstance(value, str):
          return value.strip()
      return str(value)

  def execute(request: DataFunctionRequest) -> DataFunctionResponse:
      ids = string_input_field(request, 'identifiers').splitlines()
      uniqueIds = []
      for id in ids:
          if id not in uniqueIds:
              uniqueIds.append(id)

      idMap = {k.strip(): v for v, k in enumerate(uniqueIds)}
      column_id = string_input_field(request, 'idColumn')
      input_column = request.inputColumns[column_id]
      values = [None if id is None else idMap[to_string(id)] if to_string(id) in idMap else None for id in input_column.values]
      output_column = ColumnData(name=f'{input_column.name} Order', dataType=DataType.INTEGER, values=values)
      response = DataFunctionResponse(outputColumns=[output_column])
      return response

outputFields:
- id: idColumn
  source: inputField
  type: default
  name: ID column
- id: column1
  name: Result column
  source: column
  type: filter
allowedClients:
- Analyst
- WebPlayer
demoUrl: https://www.youtube.com/watch?v=WsOxjievP4E
limitBy: none
minimumChartsVersion: 
