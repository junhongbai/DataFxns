id: d358bb04-ed05-4693-9a9b-5dd0da4fc8c3
name: Reaction Matched Pairs
description: Finds reactant and product pairs in the input data table using a reaction. The reaction must include atom maps.
category: Chemistry
version: 1.0.0
serviceName: ReactionTableSearch
serviceUri: glysade.python
executorId: Glysade.CPythonDataFxn
inputFields:
- control:
    id: reactionQuery
    label: Reaction query
    type: molecule
    sketcherContentType: chemical/x-mdl-rxnfile
    molTypes:
    - extension: .sma
      contentType: chemical/x-smarts
      name: SMARTS (*.sma)
    - extension: .rxn
      contentType: chemical/x-mdl-rxnfile
      name: RXN file (*.rxn)
  request:
    id: reactionQuery
    dataType: string
    contentType: chemical/x-mdl-rxnfile
- control:
    id: structureColumn
    label: Select structure column
    type: columnselect
    filters:
    - dataType:
      - string
      contentType:
      - chemical/x-mdl-molfile
      - chemical/x-mdl-molfile-v3000
      - chemical/x-smiles
      - chemical/x-daylight-smiles
    - dataType: binary
      contentType:
      - chemical/x-mdl-molfile
      - chemical/x-mdl-molfile-v3000
    validationRules:
    - type: required
      message: Must select column of 2D structures
  request:
    id: structureColumn
    dataType: string
    selectorType: column
- control:
    id: idColumn
    label: ID column
    type: columnselect
    multi: !!bool false
    filters:
      - dataType: int
      - dataType: string
    validationRules:
    - type: required
  request:
    id: idColumn
    dataType: string
    selectorType: column
- control:
    id: propertyColumns
    label: Property columns
    type: columnselect
    multi: !!bool true
    tooltip: Select columns containing properties
    validationRules:
    - type: oneOrMoreRequired
      message: ''
    filters:
    - dataType:
      - double
      - int
      - float
      - long
  request:
    id: propertyColumns
    dataType: list(string)
    selectorType: column
tags:
- text: chemistry
  color: '#50AF28'
- color: '#ba660b'
  text: analyze
ironPython: |
    ####################################################
    #  Copyright 2022 Glysade LLC, All Rights Reserved #
    ####################################################

    import sys,clr
    from Spotfire.Dxp.Data import DataTable, DataManager
    from Spotfire.Dxp.Application import PanelTypeIdentifiers
    from Spotfire.Dxp.Application import Panel
    import Spotfire.Dxp.Application.PanelCollection
    from Spotfire.Dxp.Application.Visuals import BarChart, TrellisMode, IndividualScalingMode

    from System import AppDomain
    for asm in AppDomain.CurrentDomain.GetAssemblies():
      if asm.GetName().Name == 'Charts':
          clr.AddReference(asm.FullName)

    from Charts import ChartsModel
    model_type = ChartsModel

    #tableId pass in args
    dataTable = ResultTables[0]

    if not dataTable:
      raise Exception('target table not found')

    page = Document.Pages.AddNew('Pair Finder Results')
    panelsToHide = [PanelTypeIdentifiers.DataPanel, PanelTypeIdentifiers.DetailsOnDemandPanel]

    for panel in page.Panels:
      if panel.TypeId in panelsToHide:
          if panel.Visible:
              panel.Visible = False


    filteringScheme = Document.FilteringSchemes[0]
    page.FilterPanel.FilteringSchemeReference = filteringScheme

    #add and configure BarChart
    barChart = page.Visuals.AddNew[BarChart]()
    barChart.Title = "Properties"
    barChart.Data.DataTableReference = dataTable
    barChart.XAxis.Expression = '<' + 'baserowid()' +'>'
    #build YAxis expression
    yAxisExpr = ""
    for column in dataTable.Columns:
      if column.Properties.DataType.IsNumeric and column.Name.StartsWith('Delta '):
          if len(yAxisExpr) != 0:
              yAxisExpr += ", "
          yAxisExpr += "Sum(" + column.NameEscapedForExpression + ")"
    barChart.YAxis.Expression = yAxisExpr
    barChart.ColorAxis.Expression = '<[Axis.Default.Names]>'
    barChart.Trellis.TrellisMode = TrellisMode.Panels
    barChart.Trellis.PanelAxis.Expression = '<[Axis.Default.Names]>'
    barChart.Trellis.ManualLayout = True
    barChart.Trellis.ManualColumnCount = 3
    barChart.Trellis.ManualRowCount = 2
    #barChart.SortedBars = 1
    barChart.YAxis.IndividualScaling = True
    barChart.YAxis.IndividualScalingMode = IndividualScalingMode.Trellis
    #barChart.Data.Filterings.Add(Document.Data.Markings.DefaultMarkingReference)

    tableVis = page.Visuals.AddNew[model_type]()
    tableVis.SetKeyValue('visualization','table-visualization')
    key = dataTable.Id.ToString()+".table-visualization.table.transposed"
    tableVis.SetKeyValue(key, 'true')
    tableVis.DataTable = dataTable
    tableVis.ConfigureColumns()
    tableVis.Marking = Document.Data.Markings.DefaultMarkingReference
    tableVis.SetActiveVisual()

    page.AutoConfigure()
updateBehavior: manual
maximumOutputColumns: !!int 0
maximumOutputTables: !!int 1
chemistryFunction: !!bool false
allowedClients:
- Analyst
- WebPlayer
demoUrl: https://youtu.be/DCoO-u3YvKY?si=pSJFNQEkxa7v-NAv
