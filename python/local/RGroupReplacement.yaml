id: 2abb2403-f1f4-4f52-4695-e5f5ce1bc9a8
name: R Group Bioisostere Replacement
description: 'Uses the Top 500 R Group replacement data of Bajorath et al. to produce analogues of the input molecules based on output from an R Group Decomposition. '
category: Chemistry
version: 1.0.0
serviceName: RGroupReplacement
serviceUri: glysade.python
executorId: Glysade.CPythonDataFxn
inputFields:
- control:
    id: structureColumn
    label: Select structure column
    type: columnselect
    tooltip: Select column of structures that the R Group Decomposition was performed on.
    filters:
    - dataType: string
      contentType:
      - chemical/x-mdl-molfile
      - chemical/x-mdl-molfile-v3000
      - chemical/x-smiles
      - chemical/x-daylight-smiles
    - dataType: binary
      contentType:
      - chemical/x-mdl-molfile
      - chemical/x-mdl-molfile-v3000
    validationRules:
    - type: required
      message: Must select column of 2D structures
  request:
    id: structureColumn
    dataType: string
    selectorType: column
- control:
    id: idColumn
    label: Column of IDs
    type: columnselect
    multi: !!bool false
    tooltip: Column to use for IDs of input structures for filtering analogues
    validationRules:
    - type: required
      message: ''
  request:
    id: idColumn
    dataType: string
    selectorType: column
- control:
    id: coresColumn
    label: Select Cores column
    type: columnselect
    tooltip: Select the column of cores produced by the R Group decomposition.
    filters:
    - dataType: string
      contentType:
      - chemical/x-mdl-molfile
      - chemical/x-mdl-molfile-v3000
      - chemical/x-smiles
      - chemical/x-daylight-smiles
    - dataType: binary
      contentType:
      - chemical/x-mdl-molfile
      - chemical/x-mdl-molfile-v3000
    validationRules:
    - type: required
      message: Must select the column of cores produced by the R Group decomposition.
  request:
    id: coresColumn
    dataType: string
    selectorType: column
- control:
    id: rGroupColumns
    label: R Group columns from R Group Decomposition
    type: columnselect
    multi: !!bool true
    filters:
    - dataType:
      - binary
      contentType:
      - chemical/x-mdl-molfile
      - chemical/x-mdl-molfile-v3000
    - dataType: string
      contentType:
      - chemical/x-mdl-molfile
      - chemical/x-mdl-molfile-v3000
    - dataType: string
      contentType:
      - chemical/x-smiles
    - dataType: string
      contentType: chemical/x-daylight-smiles
    validationRules:
    - type: oneOrMoreRequired
      message: Must select at least 1 column of R Groups
    tooltip: Select all the R Group columns from the R Group Decomposition.  These groups will be replaced by Top 500 replacements.
  request:
    id: rGroupColumns
    dataType: list(string)
    selectorType: column
- control:
    id: useLayer1
    label: Use Layer 1 replacements
    type: checkbox
    tooltip: The direct replacements
  request:
    id: useLayer1
    dataType: boolean
    data: !!bool true
- control:
    id: useLayer2
    label: User Layer 2 replacements
    type: checkbox
    tooltip: Layer 2 replacements are nearest neighbours of their parent Layer 1 replacement.
  request:
    id: useLayer2
    dataType: boolean
    data: !!bool false
tags:
- color: '#50AF28'
  text: chemistry
- color: '#c6fc00'
  text: calcprop
updateBehavior: automatic
maximumOutputColumns: !!int 1
maximumOutputTables: !!int 1
chemistryFunction: !!bool false
outputFields:
  - id: table1
    source: table
    type: default
    name: Output R Group Replacements table
allowedClients:
- Analyst
- WebPlayer
demoUrl: 
limitBy: none
ironPython: |
  ####################################################
  #  Copyright 2024 Glysade LLC, All Rights Reserved #
  ####################################################

  import sys, clr, json
  from System import Guid, String
  from Spotfire.Dxp.Data import DataTable, DataManager
  from Spotfire.Dxp.Application import PanelTypeIdentifiers
  from Spotfire.Dxp.Application import Panel
  from Spotfire.Dxp.Application.Layout import LayoutDefinition
  import Spotfire.Dxp.Application.PanelCollection

  from System import AppDomain
  for asm in AppDomain.CurrentDomain.GetAssemblies():
      if asm.GetName().Name == 'Charts' or asm.GetName().Name == 'Common':
          clr.AddReference(asm.FullName)

  from Common import ColumnIdService
  from Charts import ChartsModel

  dataTable = ResultTables[0]
  tableId = dataTable.Id.ToString()

  if not dataTable:
      raise Exception('target table not found')

  idService = Application.GetService(ColumnIdService)

  page = Document.Pages.AddNew('R-Group Replacement Results')

  tableVis = page.Visuals.AddNew[ChartsModel]()
  tableVis.SetKeyValue('visualization','table-visualization')
  tableVis.DataTable = dataTable
  tableVis.ConfigureColumns()
  tableVis.Title = 'Directed MMP Results'
  tableVis.Marking = Document.Data.Markings.DefaultMarkingReference
  tableVis.SetKeyValue(tableId+".table-visualization.table.transposed","true")
  if dataTable.Columns.Contains('Analog'):
      tableVis.SetColumnRenderer(dataTable.Columns['Analog'], 'RDKit')
  if dataTable.Columns.Contains('Core'):
      tableVis.SetColumnRenderer(dataTable.Columns['Core'], 'RDKit')
  if dataTable.Columns.Contains('Replaced'):
      tableVis.SetColumnRenderer(dataTable.Columns['Replaced'], 'RDKit')
  if dataTable.Columns.Contains('Replacement'):
      tableVis.SetColumnRenderer(dataTable.Columns['Replacement'], 'RDKit')
  removed = []
  unfixed = []

  tableVis.SetKeyValue(tableId+".table-visualization.table.removedColumnIds", json.dumps(removed))
  tableVis.SetKeyValue(tableId+".table-visualization.table.unfixedColumnIds", json.dumps(unfixed))

  #add SarMap Visual
  sarMapVis = page.Visuals.AddNew[ChartsModel]()
  sarMapVis.SetKeyValue('visualization','sar-map-visualization')
  sarMapVis.DataTable = dataTable
  sarMapVis.ConfigureColumns()
  if dataTable.Columns.Contains('Replaced'):
      replacedColumn = dataTable.Columns['Replaced']
      sarMapVis.ValueGroup1Column = replacedColumn
      sarMapVis.SetColumnRenderer(replacedColumn, 'RDKit')
      
  if dataTable.Columns.Contains('Replacement'):
      replacementColumn = dataTable.Columns['Replacement']
      sarMapVis.ValueGroup2Column = replacementColumn
      sarMapVis.SetColumnRenderer(replacementColumn, 'RDKit')
   
  sarMapVis.Marking = Document.Data.Markings.DefaultMarkingReference
  sarMapVis.Title = "RGroup Replacements"

  tableVis.SetActiveVisual()
  page.AutoConfigure()

  page.FilterPanel.Visible = True
  page.DetailsOnDemandPanel.Visible = False

  filterPanel = page.FilterPanel
  for group in filterPanel.TableGroups:
      if group.Name != dataTable.Name:
          group.Visible = False

  layout = LayoutDefinition()
  layout.BeginStackedSection()
  layout.Add(sarMapVis.Visual,50.0)
  layout.Add(tableVis.Visual, 50.0)
  layout.EndSection()
  page.ApplyLayout(layout)
