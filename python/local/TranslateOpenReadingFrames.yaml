id: 4e055974-73b3-442e-b5e4-d0668e9182e0
name: Translate Sequences From All Open Reading Frames
serviceName: TranslateOpenReadingFrames
executorId: Glysade.CPythonDataFxn
serviceUri: glysade.python
version: 1.0.0
inputFields:
  - control:
      id: sequenceColumn
      label: Select sequence column
      type: columnselect
      filters:
        - dataType: string
          contentType: chemical/x-sequence
        - dataType: binary
          contentType: chemical/x-genbank
      validationRules:
        - type: required
    request:
      id: sequenceColumn
      dataType: string
      selectorType: column
  - control:
      id: idColumn
      label: ID Column (optional)
      type: columnselect
      multi: !!bool false
      filters:
      - dataType:
        - string
        - int
      tooltip: ID column is not required for Genbank encoded sequences
    request:
      id: idColumn
      dataType: string
      selectorType: column
  - control:
      id: mimimumProteinLength
      label: Minimum protein length
      type: text
      validationRules:
        - type: required
    request:
      id: minimumProteinLength
      dataType: integer
      data: !!int 100
  - control:
      id: codonTableName
      label: Codon table name
      type: select
      options:
        - text: Standard
          value: Standard
        - text: SGC0
          value: SGC0
        - text: Vertebrate Mitochondrial
          value: Vertebrate Mitochondrial
        - text: SGC1
          value: SGC1
        - text: Yeast Mitochondrial
          value: Yeast Mitochondrial
        - text: SGC2
          value: SGC2
        - text: Mold Mitochondrial
          value: Mold Mitochondrial
        - text: Protozoan Mitochondrial
          value: Protozoan Mitochondrial
        - text: Coelenterate Mitochondrial
          value: Coelenterate Mitochondrial
        - text: Mycoplasma
          value: Mycoplasma
        - text: Spiroplasma
          value: Spiroplasma
        - text: SGC3
          value: SGC3
        - text: Invertebrate Mitochondrial
          value: Invertebrate Mitochondrial
        - text: SGC4
          value: SGC4
        - text: Ciliate Nuclear
          value: Ciliate Nuclear
        - text: Dasycladacean Nuclear
          value: Dasycladacean Nuclear
        - text: Hexamita Nuclear
          value: Hexamita Nuclear
        - text: SGC5
          value: SGC5
        - text: Echinoderm Mitochondrial
          value: Echinoderm Mitochondrial
        - text: Flatworm Mitochondrial
          value: Flatworm Mitochondrial
        - text: SGC8
          value: SGC8
        - text: Euplotid Nuclear
          value: Euplotid Nuclear
        - text: SGC9
          value: SGC9
        - text: Bacterial
          value: Bacterial
        - text: Archaeal
          value: Archaeal
        - text: Plant Plastid
          value: Plant Plastid
        - text: Alternative Yeast Nuclear
          value: Alternative Yeast Nuclear
        - text: Ascidian Mitochondrial
          value: Ascidian Mitochondrial
        - text: Alternative Flatworm Mitochondrial
          value: Alternative Flatworm Mitochondrial
        - text: Blepharisma Macronuclear
          value: Blepharisma Macronuclear
        - text: Chlorophycean Mitochondrial
          value: Chlorophycean Mitochondrial
        - text: Trematode Mitochondrial
          value: Trematode Mitochondrial
        - text: Scenedesmus obliquus Mitochondrial
          value: Scenedesmus obliquus Mitochondrial
        - text: Thraustochytrium Mitochondrial
          value: Thraustochytrium Mitochondrial
        - text: Pterobranchia Mitochondrial
          value: Pterobranchia Mitochondrial
        - text: Candidate Division SR1
          value: Candidate Division SR1
        - text: Gracilibacteria
          value: Gracilibacteria
        - text: Pachysolen tannophilus Nuclear
          value: Pachysolen tannophilus Nuclear
        - text: Karyorelict Nuclear
          value: Karyorelict Nuclear
        - text: Condylostoma Nuclear
          value: Condylostoma Nuclear
        - text: Mesodinium Nuclear
          value: Mesodinium Nuclear
        - text: Peritrich Nuclear
          value: Peritrich Nuclear
        - text: Blastocrithidia Nuclear
          value: Blastocrithidia Nuclear
        - text: Balanophoraceae Plastid
          value: Balanophoraceae Plastid
        - text: Cephalodiscidae Mitochondrial
          value: Cephalodiscidae Mitochondrial
      validationRules:
        - type: required
    request:
      id: codonTableName
      dataType: string
      data: Standard
description: Translates DNA using all open reading frames
category: Biopolymer
ironPython: |
  ####################################################
  #  Copyright 2022 Glysade LLC, All Rights Reserved #
  ####################################################

  import sys,clr
  from Spotfire.Dxp.Data import DataTable, DataManager
  from Spotfire.Dxp.Application import PanelTypeIdentifiers
  from Spotfire.Dxp.Application import Panel
  import Spotfire.Dxp.Application.PanelCollection

  from System import AppDomain
  for asm in AppDomain.CurrentDomain.GetAssemblies():
      if asm.GetName().Name == 'Charts':
          clr.AddReference(asm.FullName)

  from Charts import ChartsModel
  model_type = ChartsModel

  #tableId pass in args
  dataTable = ResultTables[0]

  if not dataTable:
      raise Exception('target table not found')

  page = Document.Pages.AddNew('Translate Open Reading Frame Results')
  panelsToHide = [PanelTypeIdentifiers.DataPanel, PanelTypeIdentifiers.DetailsOnDemandPanel]

  for panel in page.Panels:
      if panel.TypeId in panelsToHide:
          if panel.Visible:
              panel.Visible = False
          

  filteringScheme = Document.FilteringSchemes[0]
  page.FilterPanel.FilteringSchemeReference = filteringScheme

  tableVis = page.Visuals.AddNew[model_type]()
  tableVis.SetKeyValue('visualization','table-visualization')
  tableVis.DataTable = dataTable
  tableVis.ConfigureColumns()
  tableVis.Marking = Document.Data.Markings.DefaultMarkingReference

  tableVis.SetActiveVisual()
  page.AutoConfigure()
maximumOutputColumns: !!int 0
maximumOutputTables: !!int 1
demoURL: https://www.youtube.com/watch?v=2MgcH7W_NgE
tags:
- color: '#337abc'
  text: sequence
- color: '#1BE2D4'
  text: nucleotide
- color: '#e2f062'
  text: tform  
# to generate all codon table names
# from Bio.Data import CodonTable
# for k in CodonTable.ambiguous_generic_by_name:
#        print('   {"text": "',k,'", "value":"',k,'"},', sep='')